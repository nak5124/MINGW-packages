# Maintainer:  Alexey Pavlov <alexpux@gmail.com>
# Contributor: Alexey Borzenkov <snaury@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Renato Silva <br.renatosilva@gmail.com>
# Contributor: wirx6 <wirx654@gmail.com>
# Contributor: Kirill MÃ¼ller <krlmlr@mailbox.org>

_enable_ada=no
_enable_objc=no
_enable_rust=no
_enable_jit=no

_threads="mcf"

_realname=gcc
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-libs"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-lto-dump"
        )
pkgver=14.2.0
_rc=""
_snapshot=
if [[ -z ${_rc} ]]; then
  _version=${pkgver%%.*}
  _libdir=lib/gcc/${CHOST}/${pkgver%%+*}
else
  _version=${pkgver}-${_rc}
  _libdir=lib/gcc/${CHOST}/${pkgver%%.*}.0.1
fi
if [[ -z ${_snapshot} ]]; then
  _sourcedir=${_realname}-${pkgver}
  _url=https://ftp.gnu.org/gnu/gcc/${_realname}-${pkgver%%+*}
else
  _sourcedir=${_realname}-${_version}-${_snapshot}
  _url=https://gcc.gnu.org/pub/gcc/snapshots/${_version}-${_snapshot}
fi
pkgrel=2
pkgdesc="GCC for the MinGW-w64"
arch=('any')
mingw_arch=('ucrt64')
url="https://gcc.gnu.org"
msys2_references=(
  "cpe: cpe:/a:gnu:gcc"
)
license=('spdx:GPL-3.0-or-later')
makedepends=("${MINGW_PACKAGE_PREFIX}-${_realname}"
             $([[ "$_enable_ada" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-ada")
             $([[ "$_enable_rust" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-rust")
             "${MINGW_PACKAGE_PREFIX}-autotools"
             "${MINGW_PACKAGE_PREFIX}-binutils"
             "${MINGW_PACKAGE_PREFIX}-crt"
             "${MINGW_PACKAGE_PREFIX}-headers"
             "${MINGW_PACKAGE_PREFIX}-gmp"
             "${MINGW_PACKAGE_PREFIX}-gperf"
             "${MINGW_PACKAGE_PREFIX}-isl"
             "${MINGW_PACKAGE_PREFIX}-libiconv"
             "${MINGW_PACKAGE_PREFIX}-mpc"
             "${MINGW_PACKAGE_PREFIX}-mpfr"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-windows-default-manifest"
             "${MINGW_PACKAGE_PREFIX}-mcfgthread"
             "${MINGW_PACKAGE_PREFIX}-zlib"
             "${MINGW_PACKAGE_PREFIX}-zstd")
options=('!emptydirs') # '!strip' 'debug')
source=(${_url}/${_sourcedir}.tar.xz{,.sig}
        "gdbinit"
        0001-mingw-w64-Enable-64bit-long-double.patch
        0002-mingw-w64-Prefer-mingw-_mm_malloc-implementation-ins.patch
        0003-Windows-Follow-Posix-dir-exists-semantics-more-close.patch
        0004-Windows-Don-t-ignore-native-system-header-dir.patch
        0005-Handle-spaces-in-path-for-default-manifest.patch
        0006-clone_function_name_1-Retain-any-stdcall-suffix.patch
        0007-libgomp-Don-t-hard-code-MS-printf-attributes.patch
        0008-Allow-a-PCH-to-be-mapped-to-a-different-address.patch
        0009-Enable-diagnostic-color-on-msys2-shell.patch
        0010-add-m-no-align-vector-insn-option-for-i386.patch
        0011-mingw-w64-Don-t-expect-mingw-symlink.patch
        0012-mingw-w64-Don-t-activate-__USE_MINGW_ANSI_STDIO.patch
        0013-mingw-w64-Always-assume-UCRT.patch
        0014-mingw-w64-When-building-executables-not-DLLs-add-tsa.patch
        0015-libiberty-Don-t-use-method-3-on-mingw.patch)
sha256sums=('a7b39bc69cbf9e25826c5a60ab26477001f7c08d85cec04bc0e29cabed6f3cc9'
            'SKIP'
            'bce81824fc89e5e62cca350de4c17a27e27a18a1a1ad5ca3492aec1fc5af3234'
            '61e7b4b02a7770ba5dbff584a38010cf932a924008c5c16f9d344bdbb23c9a51'
            '923250169dbecd7eb149d1d547c341b579e6eaf6ccb4926781a1d860cc16d9de'
            '18730d346d51098b13d5ac3580d239dee5696e47b31b1a3ec1955aa6284738a5'
            '19e5e8de6182e8867fc5b504e9e4f93e8f78bc46eb91d7284f7d43ca3507b521'
            'ea2f0982eee55759cd35e4634d2ad39c6b54e27c62ab8de2f6098e0837ba5ab9'
            '06f72f32facf0011f594ada7678e28507a213fbd461044e2cd1901545d76b53f'
            'c5574a5dee11fb7f07975fd8297a762c512e8a93a22be14503274b3209c14db5'
            '4bf9633542b6b22a7597b71f6cc1053ea78de84fe6323e90f068ed19bfe072d2'
            '5969fb589a903619255b3145150c9516ae1046aeff8bdf6c272f0c698bc41428'
            'fcae15d5663bdd52cdc0932a79b77c31ed161e12e4827f36fb242d71c65a1028'
            '38ce8e659d49e7b11f1869aa9b13333adce951318f0b3f6c5036e827266f86ca'
            '2a0eb2eb199be0fdea56bea5df9ff7a66978135d1a1c42889055eec8da2fad85'
            'e5309e8217ae76206b8fb313ea5ece00d478cd1c2e30441bd4c2c87a7e49511e'
            'e392a8794faafb737a29c00f1feea0d0698579c6d4e07e96e789d04aa76f81be'
            '037f7cd4f5bcca1f92ce83a828fd0505f629e340eb3da6d3056be7391f6b4f3d')
validpgpkeys=(F3691687D867B81B51CE07D9BBE43771487328A9  # bpiotrowski@archlinux.org
              86CFFCA918CF3AF47147588051E8B148A9999C34  # evangelos@foutrelis.com
              13975A70E63C361C73AE69EF6EEB81F8981C74C7  # richard.guenther@gmail.com
              D3A93CAD751C2AF4F8C7AD516C35B99309B5FA62) # Jakub Jelinek <jakub@redhat.com>

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f ${_fname} ]; then
      rm -rf ${_fname}
    fi
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}"/${_sourcedir}

  apply_patch_with_msg \
    0001-mingw-w64-Enable-64bit-long-double.patch \
    0002-mingw-w64-Prefer-mingw-_mm_malloc-implementation-ins.patch \
    0003-Windows-Follow-Posix-dir-exists-semantics-more-close.patch \
    0004-Windows-Don-t-ignore-native-system-header-dir.patch \
    0005-Handle-spaces-in-path-for-default-manifest.patch \
    0006-clone_function_name_1-Retain-any-stdcall-suffix.patch \
    0007-libgomp-Don-t-hard-code-MS-printf-attributes.patch \
    0008-Allow-a-PCH-to-be-mapped-to-a-different-address.patch \
    0009-Enable-diagnostic-color-on-msys2-shell.patch \
    0010-add-m-no-align-vector-insn-option-for-i386.patch \
    0011-mingw-w64-Don-t-expect-mingw-symlink.patch \
    0012-mingw-w64-Don-t-activate-__USE_MINGW_ANSI_STDIO.patch \
    0013-mingw-w64-Always-assume-UCRT.patch \
    0014-mingw-w64-When-building-executables-not-DLLs-add-tsa.patch \
    0015-libiberty-Don-t-use-method-3-on-mingw.patch

  # change hardcoded /mingw prefix to the real prefix .. isn't this rubbish?
  # it might work at build time and could be important there but beyond that?!
  local MINGW_NATIVE_PREFIX=$(cygpath -am ${MINGW_PREFIX})
  sed -i "s#\\/mingw\\/#${MINGW_NATIVE_PREFIX//\//\\/}\\/#g" gcc/config/i386/mingw32.h
}

build() {
  mkdir -p "${srcdir}"/build-${MSYSTEM} && cd "${srcdir}"/build-${MSYSTEM}

  declare -a _extra_config
  if check_option "debug" "n"; then
    _extra_config+=("--disable-libstdcxx-debug")
  else
    _extra_config+=("--enable-libstdcxx-debug")
  fi

  _extra_config+=("--enable-plugin")
  # local _arch=znver3
  local _arch=arrowlake-s

  local _languages="c,lto,c++"

  # so libgomp DLL gets built despide static libdl
  export lt_cv_deplibs_check_method='pass_all'

  ../${_sourcedir}/configure \
    --prefix=${MINGW_PREFIX} \
    --with-local-prefix=${MINGW_PREFIX}/local \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --with-native-system-header-dir=${MINGW_PREFIX}/include \
    --libexecdir=${MINGW_PREFIX}/lib \
    --enable-bootstrap \
    --enable-checking=release \
    --with-arch=${_arch} \
    --with-tune=${_arch} \
    --with-fpmath=avx \
    --enable-languages=${_languages} \
    --enable-shared \
    --enable-static \
    --enable-libatomic \
    --disable-libquadmath \
    --enable-threads=${_threads} \
    --enable-graphite \
    --enable-fully-dynamic-string \
    --enable-libstdcxx-filesystem-ts \
    --enable-libstdcxx-time \
    --enable-__cxa_atexit \
    --disable-libstdcxx-pch \
    --enable-lto \
    --enable-libgomp \
    --disable-libssp \
    --disable-multilib \
    --disable-rpath \
    --disable-win32-registry \
    --disable-nls \
    --disable-werror \
    --disable-symvers \
    --with-libiconv \
    --with-system-zlib \
    --with-{gmp,mpfr,mpc,isl}=${MINGW_PREFIX} \
    --with-local-prefix=${MINGW_PREFIX}/local \
    --with-pkgversion="Rev${pkgrel}, Built by MSYS2 project" \
    --with-bugurl="https://github.com/msys2/MINGW-packages/issues" \
    --with-gnu-as \
    --with-gnu-ld \
    "${_extra_config[@]}"

  # While we're debugging -fopenmp problems at least.
  # .. we may as well not strip anything.
  if check_option "strip" "n"; then
    sed -i 's,^STRIP = .*$,STRIP = true,g'                   Makefile
    sed -i 's,^STRIP_FOR_TARGET=.*$,STRIP_FOR_TARGET=true,g' Makefile
  fi

  # https://gcc.gnu.org/onlinedocs/gccint/Makefile.html
  make -O STAGE1_CFLAGS="-O2" profiledbootstrap
}

package_gcc-libs() {
  pkgdesc="GNU Compiler Collection (libraries) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-mcfgthread-libs")
  provides=("${MINGW_PACKAGE_PREFIX}-omp")

  # Licensing information

  # Part of the package is GCCRLE, part is LGPL-2.1-or-later, see README generation below.
  # Since the packaged GCCRLE libraries are also spdx:GPL-3.0-or-later,
  # and LGPL-2.1-or-later is compatible with GPL-3.0-or-later, the whole package can
  # be redistributed under GPL-3.0-or-later.
  license=('spdx:GPL-3.0-or-later WITH GCC-exception-3.1 AND LGPL-2.1-or-later')

  cd "${srcdir}"/build-${MSYSTEM}

  make -C $CHOST/libgcc DESTDIR="${pkgdir}" install-shared
  install -dm755 "${pkgdir}"${MINGW_PREFIX}/bin
  mv "${pkgdir}"/libgcc_*.dll "${pkgdir}"${MINGW_PREFIX}/bin/

  # libitm* and libvtv* are disbled until fixed
  # for lib in libatomic libgomp libquadmath libstdc++-v3/src; do
  for lib in libatomic libgomp libstdc++-v3/src; do
    make -C $CHOST/$lib DESTDIR="${pkgdir}" install-toolexeclibLTLIBRARIES
  done

  rm -r "${pkgdir}"${MINGW_PREFIX}/lib

  make -C $CHOST/libstdc++-v3/po DESTDIR="${pkgdir}" install

  # We explain the licensing in this generated README file
  mkdir -p "${pkgdir}"${MINGW_PREFIX}/share/licenses/${_realname}-libs
  cat << ENDFILE > "${pkgdir}"${MINGW_PREFIX}/share/licenses/${_realname}-libs/README
The libgcc, libstdc++, libgomp and libatomic libraries are covered by
GPL-3.0-or-later with GCC-exception-3.1. The libquadmath library is covered
by LGPL-2.1-or-later. The package as a whole can be redistributed under GPL-3.0-or-later.
ENDFILE

  # License files
  install -Dm644 "${srcdir}"/${_sourcedir}/COPYING3        "${pkgdir}"${MINGW_PREFIX}/share/licenses/${_realname}-libs/COPYING3
  install -Dm644 "${srcdir}"/${_sourcedir}/COPYING.LIB     "${pkgdir}"${MINGW_PREFIX}/share/licenses/${_realname}-libs/COPYING.LIB
  install -Dm644 "${srcdir}"/${_sourcedir}/COPYING.RUNTIME "${pkgdir}"${MINGW_PREFIX}/share/licenses/${_realname}-libs/COPYING.RUNTIME
}

package_gcc() {
  pkgdesc="GNU Compiler Collection (C,C++,OpenMP) for MinGW-w64"
  depends=("${MINGW_PACKAGE_PREFIX}-binutils"
           "${MINGW_PACKAGE_PREFIX}-crt"
           "${MINGW_PACKAGE_PREFIX}-headers"
           "${MINGW_PACKAGE_PREFIX}-isl"
           "${MINGW_PACKAGE_PREFIX}-gmp"
           "${MINGW_PACKAGE_PREFIX}-mpfr"
           "${MINGW_PACKAGE_PREFIX}-mpc"
           "${MINGW_PACKAGE_PREFIX}-${_realname}-libs=${pkgver}-${pkgrel}"
           "${MINGW_PACKAGE_PREFIX}-windows-default-manifest"
           "${MINGW_PACKAGE_PREFIX}-winpthreads"
           "${MINGW_PACKAGE_PREFIX}-zlib"
           "${MINGW_PACKAGE_PREFIX}-zstd")
  provides=("${MINGW_PACKAGE_PREFIX}-${_realname}-base"
            "${MINGW_PACKAGE_PREFIX}-cc")
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}-base"
             $([[ "$_enable_objc" != "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-objc" || true)
             $([[ "$_enable_ada" != "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-ada" || true)
             $([[ "$_enable_rust" != "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-rust" || true)
             $([[ "$_enable_jit" != "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-libgccjit" || true)
  )
  groups=("${MINGW_PACKAGE_PREFIX}-toolchain")

  cd "${srcdir}"/build-${MSYSTEM}

  make -C gcc DESTDIR="${pkgdir}" install-driver install-cpp install-gcc-ar \
    c++.install-common install-headers install-plugin install-lto-wrapper

  make -C c++tools DESTDIR="${pkgdir}" install

  install -m755 -t "${pkgdir}"${MINGW_PREFIX}/bin/ gcc/gcov{,-tool}.exe
  install -m755 -t "${pkgdir}"${MINGW_PREFIX}/${_libdir}/ \
    gcc/{cc1,cc1plus,collect2,lto1}.exe

  make -C $CHOST/libgcc DESTDIR="${pkgdir}" install
  rm "${pkgdir}"/libgcc_*.dll

  make -C $CHOST/libstdc++-v3/src DESTDIR="${pkgdir}" install
  make -C $CHOST/libstdc++-v3/include DESTDIR="${pkgdir}" install
  make -C $CHOST/libstdc++-v3/libsupc++ DESTDIR="${pkgdir}" install
  make -C $CHOST/libstdc++-v3/python DESTDIR="${pkgdir}" install
  make DESTDIR="${pkgdir}" install-libcc1
  rm "${pkgdir}"${MINGW_PREFIX}/bin/libstdc++*.dll

  # for lib in libatomic libgomp libquadmath; do
  for lib in libatomic libgomp; do
    make -C $CHOST/$lib DESTDIR="${pkgdir}" install
    rm "${pkgdir}"${MINGW_PREFIX}/bin/${lib}*.dll
  done

  make DESTDIR="${pkgdir}" install-fixincludes
  make -C gcc DESTDIR="${pkgdir}" install-mkheaders

  make -C lto-plugin DESTDIR="${pkgdir}" install
  install -dm755 "${pkgdir}"${MINGW_PREFIX}/lib/bfd-plugins/
  cp "${pkgdir}"${MINGW_PREFIX}/${_libdir}/liblto_plugin.dll "${pkgdir}"${MINGW_PREFIX}/lib/bfd-plugins/

  make -C $CHOST/libgomp DESTDIR="${pkgdir}" install-nodist_{libsubinclude,toolexeclib}HEADERS
  # make -C $CHOST/libquadmath DESTDIR="${pkgdir}" install-nodist_libsubincludeHEADERS

  make -C gcc DESTDIR="${pkgdir}" install-man install-info
  rm "${pkgdir}"${MINGW_PREFIX}/share/man/man1/lto-dump.1

  make -C libcpp DESTDIR="${pkgdir}" install
  make -C gcc DESTDIR="${pkgdir}" install-po

  # make -C $CHOST/libstdc++-v3/doc DESTDIR="${pkgdir}" doc-install-man

  cp "${pkgdir}"${MINGW_PREFIX}/bin/gcc.exe "${pkgdir}"${MINGW_PREFIX}/bin/cc.exe
  cp "${pkgdir}"${MINGW_PREFIX}/bin/gcc.exe "${pkgdir}"${MINGW_PREFIX}/bin/${CHOST}-cc.exe

  # install "custom" system gdbinit
  install -D -m644 "${srcdir}"/gdbinit "${pkgdir}"${MINGW_PREFIX}/etc/gdbinit
  sed -i 's|%GCC_NAME%|gcc-'${pkgver%%+*}'|g' "${pkgdir}"${MINGW_PREFIX}/etc/gdbinit

  # byte-compile python libraries
  ${MINGW_PREFIX}/bin/python -m compileall -o 0 -o 1 "${pkgdir}"${MINGW_PREFIX}/share/gcc-${pkgver%%+*}/
}

package_gcc-lto-dump() {
  pkgdesc="Dump link time optimization object files (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}=$pkgver-$pkgrel"
           "${MINGW_PACKAGE_PREFIX}-${_realname}-libs=${pkgver}-${pkgrel}"
           "${MINGW_PACKAGE_PREFIX}-gmp"
           "${MINGW_PACKAGE_PREFIX}-isl"
           "${MINGW_PACKAGE_PREFIX}-mcfgthread-libs"
           "${MINGW_PACKAGE_PREFIX}-mpc"
           "${MINGW_PACKAGE_PREFIX}-mpfr"
           "${MINGW_PACKAGE_PREFIX}-zlib"
           "${MINGW_PACKAGE_PREFIX}-zstd")

  cd "${srcdir}"/build-${MSYSTEM}

  make -C gcc DESTDIR="${pkgdir}" lto.install-{common,man,info}
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
