From 396d9da0541ba15a99bf8b30d7d6a3c1c9fb3c0e Mon Sep 17 00:00:00 2001
From: LIU Hao <lh_mouse@126.com>
Date: Tue, 22 Oct 2024 22:28:07 +0800
Subject: [PATCH] Merge `.CRT`, `.ctors` and `.dtors` into `.rdata`

Signed-off-by: LIU Hao <lh_mouse@126.com>
---
 ld/scripttempl/pe.sc  | 112 ++++++++++++++++++++++--------------------
 ld/scripttempl/pep.sc | 111 +++++++++++++++++++++--------------------
 2 files changed, 118 insertions(+), 105 deletions(-)

diff --git a/ld/scripttempl/pe.sc b/ld/scripttempl/pe.sc
index 70f5194b02f..75730a5b2c7 100644
--- a/ld/scripttempl/pe.sc
+++ b/ld/scripttempl/pe.sc
@@ -44,6 +44,7 @@ if test "${RELOCATING}"; then
   R_CRT_XL='KEEP (*(SORT(.CRT$XL*)))  /* TLS callbacks */'
   R_CRT_XP='KEEP (*(SORT(.CRT$XP*)))  /* Pre-termination */'
   R_CRT_XT='KEEP (*(SORT(.CRT$XT*)))  /* Termination */'
+  R_CRT_XD='KEEP (*(SORT(.CRT$XD*)))  /* Dynamic TLS Initializer */'
   R_TLS='
     KEEP (*(.tls$AAA))
     KEEP (*(.tls))
@@ -65,6 +66,7 @@ else
   R_CRT_XL=
   R_CRT_XP=
   R_CRT_XT=
+  R_CRT_XD=
   R_TLS='*(.tls)'
   R_RSRC='*(.rsrc)'
 fi
@@ -97,6 +99,40 @@ SECTIONS
     ${RELOCATING+ *(.gnu.linkonce.t.*)}
     ${RELOCATING+*(.glue_7t)}
     ${RELOCATING+*(.glue_7)}
+    ${RELOCATING+KEEP (*(SORT_NONE(.fini)))}
+    ${RELOCATING+/* ??? Why is .gcc_exc here?  */}
+    ${RELOCATING+ *(.gcc_exc)}
+    ${RELOCATING+PROVIDE (etext = .);}
+    ${RELOCATING+PROVIDE (_etext = .);}
+    ${RELOCATING+ KEEP (*(.gcc_except_table))}
+  }
+
+  /* The Cygwin32 library uses a section to avoid copying certain data
+     on fork.  This used to be named ".data$nocopy".  The linker used
+     to include this between __data_start__ and __data_end__, but that
+     breaks building the cygwin32 dll.  Instead, we name the section
+     ".data_cygwin_nocopy" and explicitly include it after __data_end__. */
+
+  .data ${RELOCATING+BLOCK(__section_alignment__)} :
+  {
+    ${RELOCATING+__data_start__ = . ;}
+    *(.data)
+    ${RELOCATING+*(.data2)}
+    ${R_DATA}
+    KEEP(*(.jcr))
+    ${RELOCATING+__data_end__ = . ;}
+    ${RELOCATING+*(.data_cygwin_nocopy)}
+  }
+
+  .rdata ${RELOCATING+BLOCK(__section_alignment__)} :
+  {
+    ${R_RDATA}
+    . = ALIGN(4);
+    ${RELOCATING+__rt_psrelocs_start = .;}
+    ${RELOCATING+KEEP(*(.rdata_runtime_pseudo_reloc))}
+    ${RELOCATING+__rt_psrelocs_end = .;}
+
+    /* .ctors & .dtors */
     ${CONSTRUCTING+
        /* Note: we always define __CTOR_LIST__ and ___CTOR_LIST__ here,
           we do not PROVIDE them.  This is because the ctors.o startup
@@ -136,44 +172,32 @@ SECTIONS
        KEEP(*(SORT_BY_NAME(.dtors.*)));
        LONG (0);
      }
-    ${RELOCATING+KEEP (*(SORT_NONE(.fini)))}
-    ${RELOCATING+/* ??? Why is .gcc_exc here?  */}
-    ${RELOCATING+ *(.gcc_exc)}
-    ${RELOCATING+PROVIDE (etext = .);}
-    ${RELOCATING+PROVIDE (_etext = .);}
-    ${RELOCATING+ KEEP (*(.gcc_except_table))}
-  }
-
-  /* The Cygwin32 library uses a section to avoid copying certain data
-     on fork.  This used to be named ".data$nocopy".  The linker used
-     to include this between __data_start__ and __data_end__, but that
-     breaks building the cygwin32 dll.  Instead, we name the section
-     ".data_cygwin_nocopy" and explicitly include it after __data_end__. */
 
-  .data ${RELOCATING+BLOCK(__section_alignment__)} :
-  {
-    ${RELOCATING+__data_start__ = . ;}
-    *(.data)
-    ${RELOCATING+*(.data2)}
-    ${R_DATA}
-    KEEP(*(.jcr))
-    ${RELOCATING+__data_end__ = . ;}
-    ${RELOCATING+*(.data_cygwin_nocopy)}
+    /* .CRT */
+    ${RELOCATING+___crt_xc_start__ = . ;}
+    ${R_CRT_XC}
+    ${RELOCATING+___crt_xc_end__ = . ;}
+    ${RELOCATING+___crt_xi_start__ = . ;}
+    ${R_CRT_XI}
+    ${RELOCATING+___crt_xi_end__ = . ;}
+    ${RELOCATING+___crt_xl_start__ = . ;}
+    ${R_CRT_XL}
+    /* ___crt_xl_end__ is defined in the TLS Directory support code */
+    ${RELOCATING+___crt_xp_start__ = . ;}
+    ${R_CRT_XP}
+    ${RELOCATING+___crt_xp_end__ = . ;}
+    ${RELOCATING+___crt_xt_start__ = . ;}
+    ${R_CRT_XT}
+    ${RELOCATING+___crt_xt_end__ = . ;}
+    ${RELOCATING+___crt_xd_start__ = . ;}
+    ${R_CRT_XD}
+    ${RELOCATING+___crt_xd_end__ = . ;}
   }
 
-  .rdata ${RELOCATING+BLOCK(__section_alignment__)} :
-  {
-    ${R_RDATA}
-    . = ALIGN(4);
-    ${RELOCATING+__rt_psrelocs_start = .;}
-    ${RELOCATING+KEEP(*(.rdata_runtime_pseudo_reloc))}
-    ${RELOCATING+__rt_psrelocs_end = .;}
-  }
-  ${RELOCATING+__rt_psrelocs_size = __rt_psrelocs_end - __rt_psrelocs_start;}
-  ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;}
-  ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST_END__ = .;}
-  ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;}
-  ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;}
+  ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST_END__ = __rt_psrelocs_end;}
+  ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST_END__ = __rt_psrelocs_end;}
+  ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST__ = __rt_psrelocs_start;}
+  ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST__ = __rt_psrelocs_start;}
 
   .eh_frame ${RELOCATING+BLOCK(__section_alignment__)} :
   {
@@ -218,24 +242,6 @@ SECTIONS
     ${RELOCATING+__IAT_end__ = .;}
     ${R_IDATA67}
   }
-  .CRT ${RELOCATING+BLOCK(__section_alignment__)} :
-  {
-    ${RELOCATING+___crt_xc_start__ = . ;}
-    ${R_CRT_XC}
-    ${RELOCATING+___crt_xc_end__ = . ;}
-    ${RELOCATING+___crt_xi_start__ = . ;}
-    ${R_CRT_XI}
-    ${RELOCATING+___crt_xi_end__ = . ;}
-    ${RELOCATING+___crt_xl_start__ = . ;}
-    ${R_CRT_XL}
-    /* ___crt_xl_end__ is defined in the TLS Directory support code */
-    ${RELOCATING+___crt_xp_start__ = . ;}
-    ${R_CRT_XP}
-    ${RELOCATING+___crt_xp_end__ = . ;}
-    ${RELOCATING+___crt_xt_start__ = . ;}
-    ${R_CRT_XT}
-    ${RELOCATING+___crt_xt_end__ = . ;}
-  }
 
   /* Windows TLS expects .tls\$AAA to be at the start and .tls\$ZZZ to be
      at the end of section.  This is important because _tls_start MUST
diff --git a/ld/scripttempl/pep.sc b/ld/scripttempl/pep.sc
index 63039f11574..b9c11cd74ed 100644
--- a/ld/scripttempl/pep.sc
+++ b/ld/scripttempl/pep.sc
@@ -45,6 +45,7 @@ if test "${RELOCATING}"; then
   R_CRT_XL='KEEP (*(SORT(.CRT$XL*)))  /* TLS callbacks */'
   R_CRT_XP='KEEP (*(SORT(.CRT$XP*)))  /* Pre-termination */'
   R_CRT_XT='KEEP (*(SORT(.CRT$XT*)))  /* Termination */'
+  R_CRT_XD='KEEP (*(SORT(.CRT$XD*)))  /* Dynamic TLS Initializer */'
   R_TLS='
     KEEP (*(.tls$AAA))
     KEEP (*(.tls))
@@ -66,6 +67,7 @@ else
   R_CRT_XL=
   R_CRT_XP=
   R_CRT_XT=
+  R_CRT_XD=
   R_TLS='*(.tls)'
   R_RSRC='*(.rsrc)'
 fi
@@ -99,6 +101,40 @@ SECTIONS
     ${RELOCATING+*(.glue_7t)}
     ${RELOCATING+*(.glue_7)}
     ${CONSTRUCTING+. = ALIGN(8);}
+    ${RELOCATING+KEEP (*(SORT_NONE(.fini)))}
+    ${RELOCATING+/* ??? Why is .gcc_exc here?  */}
+    ${RELOCATING+ *(.gcc_exc)}
+    ${RELOCATING+PROVIDE (etext = .);}
+    ${RELOCATING+ KEEP (*(.gcc_except_table))}
+  }
+
+  /* The Cygwin32 library uses a section to avoid copying certain data
+     on fork.  This used to be named ".data$nocopy".  The linker used
+     to include this between __data_start__ and __data_end__, but that
+     breaks building the cygwin32 dll.  Instead, we name the section
+     ".data_cygwin_nocopy" and explicitly include it after __data_end__. */
+
+  .data ${RELOCATING+BLOCK(__section_alignment__)} :
+  {
+    ${RELOCATING+__data_start__ = . ;}
+    *(.data)
+    ${RELOCATING+*(.data2)}
+    ${R_DATA}
+    KEEP(*(.jcr))
+    ${RELOCATING+__data_end__ = . ;}
+    ${RELOCATING+*(.data_cygwin_nocopy)}
+  }
+
+  .rdata ${RELOCATING+BLOCK(__section_alignment__)} :
+  {
+    ${R_RDATA}
+    . = ALIGN(4);
+    ${RELOCATING+__rt_psrelocs_start = .;}
+    ${RELOCATING+KEEP(*(.rdata_runtime_pseudo_reloc))}
+    ${RELOCATING+__rt_psrelocs_end = .;}
+
+    /* .ctors & .dtors */
+    ${CONSTRUCTING+. = ALIGN(8);}
     ${CONSTRUCTING+
        /* Note: we always define __CTOR_LIST__ and ___CTOR_LIST__ here,
           we do not PROVIDE them.  This is because the ctors.o startup
@@ -138,43 +174,32 @@ SECTIONS
        KEEP (*(SORT_BY_NAME(.dtors.*)));
        LONG (0); LONG (0);
      }
-    ${RELOCATING+KEEP (*(SORT_NONE(.fini)))}
-    ${RELOCATING+/* ??? Why is .gcc_exc here?  */}
-    ${RELOCATING+ *(.gcc_exc)}
-    ${RELOCATING+PROVIDE (etext = .);}
-    ${RELOCATING+ KEEP (*(.gcc_except_table))}
-  }
 
-  /* The Cygwin32 library uses a section to avoid copying certain data
-     on fork.  This used to be named ".data$nocopy".  The linker used
-     to include this between __data_start__ and __data_end__, but that
-     breaks building the cygwin32 dll.  Instead, we name the section
-     ".data_cygwin_nocopy" and explicitly include it after __data_end__. */
-
-  .data ${RELOCATING+BLOCK(__section_alignment__)} :
-  {
-    ${RELOCATING+__data_start__ = . ;}
-    *(.data)
-    ${RELOCATING+*(.data2)}
-    ${R_DATA}
-    KEEP(*(.jcr))
-    ${RELOCATING+__data_end__ = . ;}
-    ${RELOCATING+*(.data_cygwin_nocopy)}
+    /* .CRT */
+    ${RELOCATING+___crt_xc_start__ = . ;}
+    ${R_CRT_XC}
+    ${RELOCATING+___crt_xc_end__ = . ;}
+    ${RELOCATING+___crt_xi_start__ = . ;}
+    ${R_CRT_XI}
+    ${RELOCATING+___crt_xi_end__ = . ;}
+    ${RELOCATING+___crt_xl_start__ = . ;}
+    ${R_CRT_XL}
+    /* ___crt_xl_end__ is defined in the TLS Directory support code */
+    ${RELOCATING+___crt_xp_start__ = . ;}
+    ${R_CRT_XP}
+    ${RELOCATING+___crt_xp_end__ = . ;}
+    ${RELOCATING+___crt_xt_start__ = . ;}
+    ${R_CRT_XT}
+    ${RELOCATING+___crt_xt_end__ = . ;}
+    ${RELOCATING+___crt_xd_start__ = . ;}
+    ${R_CRT_XD}
+    ${RELOCATING+___crt_xd_end__ = . ;}
   }
 
-  .rdata ${RELOCATING+BLOCK(__section_alignment__)} :
-  {
-    ${R_RDATA}
-    . = ALIGN(4);
-    ${RELOCATING+__rt_psrelocs_start = .;}
-    ${RELOCATING+KEEP(*(.rdata_runtime_pseudo_reloc))}
-    ${RELOCATING+__rt_psrelocs_end = .;}
-  }
-  ${RELOCATING+__rt_psrelocs_size = __rt_psrelocs_end - __rt_psrelocs_start;}
-  ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;}
-  ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST_END__ = .;}
-  ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;}
-  ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;}
+  ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST_END__ = __rt_psrelocs_end;}
+  ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST_END__ = __rt_psrelocs_end;}
+  ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST__ = __rt_psrelocs_start;}
+  ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST__ = __rt_psrelocs_start;}
 
   .eh_frame ${RELOCATING+BLOCK(__section_alignment__)} :
   {
@@ -224,24 +249,6 @@ SECTIONS
     ${RELOCATING+__IAT_end__ = .;}
     ${R_IDATA67}
   }
-  .CRT ${RELOCATING+BLOCK(__section_alignment__)} :
-  {
-    ${RELOCATING+___crt_xc_start__ = . ;}
-    ${R_CRT_XC}
-    ${RELOCATING+___crt_xc_end__ = . ;}
-    ${RELOCATING+___crt_xi_start__ = . ;}
-    ${R_CRT_XI}
-    ${RELOCATING+___crt_xi_end__ = . ;}
-    ${RELOCATING+___crt_xl_start__ = . ;}
-    ${R_CRT_XL}
-    /* ___crt_xl_end__ is defined in the TLS Directory support code */
-    ${RELOCATING+___crt_xp_start__ = . ;}
-    ${R_CRT_XP}
-    ${RELOCATING+___crt_xp_end__ = . ;}
-    ${RELOCATING+___crt_xt_start__ = . ;}
-    ${R_CRT_XT}
-    ${RELOCATING+___crt_xt_end__ = . ;}
-  }
 
   /* Windows TLS expects .tls\$AAA to be at the start and .tls\$ZZZ to be
      at the end of the .tls section.  This is important because _tls_start MUST
-- 
2.47.0

